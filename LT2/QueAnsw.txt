### 1. Что такое функция?

Функция — это самостоятельный блок кода, который можно вызвать для выполнения определённой задачи. Функции помогают организовывать и переиспользовать код. В Swift функции могут принимать параметры и возвращать значения.

### 2. Как объявить функцию?

Функция в Swift объявляется с использованием ключевого слова `func`, за которым следует имя функции, параметры в круглых скобках и тип возвращаемого значения, если функция что-то возвращает. Вот пример:

```swift
func sayHello() {
    print("Hello, world!")
}
```

### 3. Как объявить функцию с несколькими параметрами?

Для объявления функции с несколькими параметрами перечислите их через запятую в круглых скобках. Каждый параметр указывается с именем и типом:

```swift
func greet(name: String, age: Int) {
    print("Hello, \(name)! You are \(age) years old.")
}
```

### 4. Что такое опциональный кортеж?

Опциональный кортеж — это кортеж (tuple), который может либо содержать значения, либо быть `nil`. Это полезно, когда функция может возвращать несколько значений, но иногда может и не возвращать ничего.

Пример:

```swift
func divide(_ a: Int, by b: Int) -> (result: Int, remainder: Int)? {
    if b == 0 {
        return nil
    } else {
        return (a / b, a % b)
    }
}

if let result = divide(10, by: 2) {
    print("Result: \(result.result), Remainder: \(result.remainder)")
} else {
    print("Division by zero is not allowed.")
}
```

### 5. Для чего служат ярлыки аргументов и имен параметров функции?

В Swift у каждого параметра функции может быть ярлык аргумента (argument label) и имя параметра (parameter name). Ярлык аргумента используется при вызове функции, а имя параметра — внутри функции.

Пример:

```swift
func greet(person name: String, from city: String) {
    print("Hello, \(name) from \(city)!")
}

greet(person: "John", from: "New York")
```

- `person` и `from` — ярлыки аргументов.
- `name` и `city` — имена параметров.

### 6. Что такое вариативные параметры?

Вариативные параметры (variadic parameters) позволяют передавать в функцию переменное количество значений одного типа. Для объявления вариативного параметра используйте три точки `...` после типа параметра:

```swift
func sum(numbers: Int...) -> Int {
    var total = 0
    for number in numbers {
        total += number
    }
    return total
}

let totalSum = sum(numbers: 1, 2, 3, 4, 5) // 15
```

### 7. Что такое сквозные параметры?

Сквозные параметры (in-out parameters) позволяют функции изменять значения переданных ей переменных. Для этого параметр помечается как `inout`:

```swift
func swapValues(_ a: inout Int, _ b: inout Int) {
    let temp = a
    a = b
    b = temp
}

var x = 10
var y = 20
swapValues(&x, &y) // Теперь x = 20, y = 10
```

### 8. Для чего служат функциональные типы? Как создать свой функциональный тип?

Функциональные типы позволяют использовать функции как значения: передавать их в другие функции, возвращать из функций и сохранять в переменные.

Пример создания функционального типа:

```swift
func multiplyByTwo(_ number: Int) -> Int {
    return number * 2
}

let myFunction: (Int) -> Int = multiplyByTwo

let result = myFunction(3) // 6
```

### 9. Что такое вложенные функции?

Вложенные функции — это функции, объявленные внутри других функций. Они могут быть использованы только в той функции, внутри которой объявлены. Это помогает инкапсулировать вспомогательные функции, чтобы они не были доступны за пределами основного кода.

```swift
func outerFunction() {
    func innerFunction() {
        print("This is an inner function")
    }
    
    innerFunction()
}

outerFunction()
```

### 10. Что такое замыкание? Для чего оно служит?

Замыкание (closure) — это блок кода, который можно передавать и вызывать позже. Замыкания могут захватывать и сохранять ссылки на переменные и константы из окружающего контекста.

Пример замыкания:

```swift
let closure = { (name: String) in
    print("Hello, \(name)!")
}

closure("Alice")
```

### 11. Что такое автозамыкание? Что такое сбегающее замыкание?

- **Автозамыкание (autoclosure)**: это замыкание, которое автоматически создаётся для выражения, переданного как аргумент функции. Оно позволяет отложить выполнение выражения до тех пор, пока оно действительно не понадобится.

    Пример:

    ```swift
    func printMessage(_ message: @autoclosure () -> String) {
        print(message())
    }

    printMessage("Hello, Swift!")
    ```

- **Сбегающее замыкание (escaping closure)**: это замыкание, которое передаётся в функцию и может быть вызвано после завершения выполнения функции. Чтобы объявить параметр функции как сбегающее замыкание, используйте `@escaping`.

    Пример:

    ```swift
    var completionHandlers: [() -> Void] = []

    func someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {
        completionHandlers.append(completionHandler)
    }

    someFunctionWithEscapingClosure {
        print("This is an escaping closure")
    }
    ```

### 12. Как объявить перечисление? Для чего служат перечисления?

Перечисление (enum) — это тип данных, который позволяет вам определить набор связанных значений и работать с ними безопасным и удобным образом.

Пример объявления перечисления:

```swift
enum CompassPoint {
    case north
    case south
    case east
    case west
}

var direction = CompassPoint.north
direction = .east
```

Перечисления служат для группировки связанных значений, а также могут включать дополнительные функции и свойства, что делает их мощным инструментом в Swift.