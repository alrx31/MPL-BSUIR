### 1. Что такое класс?

Класс в Swift — это шаблон для создания объектов, объединяющий данные и функции, которые работают с этими данными. Класс может определять свойства (характеристики объекта) и методы (функции, выполняемые объектом). Классы поддерживают наследование, то есть один класс может унаследовать свойства и методы другого класса.

Пример:

```swift
class Vehicle {
    var currentSpeed = 0.0
    
    func description() -> String {
        return "Traveling at \(currentSpeed) miles per hour"
    }
}
```

### 2. Что такое структура?

Структура в Swift — это тип данных, который позволяет объединять несколько значений в единое целое. Структуры могут иметь свойства и методы, похожие на классы, но они не поддерживают наследование.

Пример:

```swift
struct Point {
    var x: Double
    var y: Double
    
    func distanceTo(point: Point) -> Double {
        return sqrt(pow(x - point.x, 2) + pow(y - point.y, 2))
    }
}
```

### 3. Чем класс отличается от структуры?

Основные различия между классами и структурами:

1. **Наследование**: Классы могут наследоваться от других классов, структуры не поддерживают наследование.
2. **Типы**: Классы — это ссылочные типы, структуры — типы значений (см. вопрос 5).
3. **Идентичность**: Объекты классов имеют идентичность, то есть каждый экземпляр класса — это уникальная сущность. В случае структур, экземпляры не обладают такой идентичностью — они сравниваются по значению.
4. **Инициализация**: Структуры автоматически получают инициализатор, если все их свойства имеют значения по умолчанию, классы нет.
5. **Копирование**: При присвоении переменной или константе экземпляра структуры создаётся его копия. В случае с классом копируется ссылка на один и тот же объект.

### 4. Что такое объект?

Объект — это экземпляр класса. Он содержит конкретные данные и функции, определённые в классе. Объекты создаются из классов и могут иметь уникальные состояния, зависящие от значений их свойств.

Пример:

```swift
class Dog {
    var name: String
    var age: Int
    
    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
    
    func bark() {
        print("\(name) is barking!")
    }
}

let myDog = Dog(name: "Buddy", age: 3)
myDog.bark() // Buddy is barking!
```

Здесь `myDog` — это объект класса `Dog`.

### 5. Типы значений. Ссылочные типы. Чем отличаются друг от друга?

- **Типы значений** (Value Types): Переменные и константы, объявленные как типы значений (например, структуры, перечисления), копируются при присвоении или передаче в функцию. Каждая копия имеет свои собственные данные. Примеры: `Int`, `Double`, `Struct`, `Enum`.

    Пример:

    ```swift
    struct Point {
        var x: Int
        var y: Int
    }

    var a = Point(x: 1, y: 2)
    var b = a
    b.x = 5

    print(a.x) // 1
    print(b.x) // 5
    ```

- **Ссылочные типы** (Reference Types): Переменные и константы, объявленные как ссылочные типы (например, классы), не копируются при присвоении или передаче в функцию. Вместо этого передаётся ссылка на один и тот же объект в памяти. Примеры: `Class`.

    Пример:

    ```swift
    class Person {
        var name: String
        
        init(name: String) {
            self.name = name
        }
    }

    var personA = Person(name: "Alice")
    var personB = personA
    personB.name = "Bob"

    print(personA.name) // Bob
    print(personB.name) // Bob
    ```

    Здесь обе переменные `personA` и `personB` указывают на один и тот же объект в памяти.

### 6. Для чего используются указатели?

В Swift указатели напрямую не используются так, как в некоторых других языках программирования (например, C или C++). Swift управляет памятью автоматически через ARC (Automatic Reference Counting). Однако, если нужно работать с низкоуровневыми операциями, например, при взаимодействии с C API или оптимизации, можно использовать `UnsafePointer`, `UnsafeMutablePointer` и другие "небезопасные" типы указателей для управления памятью вручную. 

### 7. Ключевое слово `self`

Ключевое слово `self` в Swift используется для ссылки на текущий экземпляр класса, структуры или перечисления. Оно часто применяется, чтобы отличить свойства экземпляра от параметров с теми же именами или для вызова методов или доступа к свойствам внутри замыканий.

Пример использования:

```swift
class Car {
    var model: String
    
    init(model: String) {
        self.model = model  // `self.model` относится к свойству экземпляра, `model` - к параметру инициализатора
    }
    
    func printModel() {
        print("The model of the car is \(self.model)")
    }
}
```

В этом примере `self` используется для явного указания на свойство экземпляра класса `model`.